#assignment-2

#assignment-list

#9. Replace list’s item with new value if found
lst = [1, 2, 3, 4, 2, 5]
old_value = 2
new_value = 99
lst = [new_value if x == old_value else x for x in lst]
print("Updated list:", lst)

#10. Remove all occurrences of a specific item from a list
lst = [1, 2, 3, 2, 4, 2, 5]
remove_value = 2
lst = [x for x in lst if x != remove_value]
print("List after removing item:", lst)

#assignment-tuples

#6. Sort a tuple of tuples by 2nd item

data = ((1, 5), (3, 1), (2, 9), (4, 0))
sorted_data = tuple(sorted(data, key=lambda x: x[1]))
print("Sorted by 2nd item:", sorted_data)


#7. Count the number of occurrences of item ‘x’ from a tuple

items = (1, 2, 3, 4, 2, 5, 2, 6)
x = 2
count = items.count(x)
print(f"Occurrences of {x}:", count)


#8. Copy specific elements from one tuple to a new tuple

original = (10, 20, 30, 40, 50, 60)
new_tuple = tuple(original[i] for i in range(len(original)) if i % 2 == 0)
print("New tuple with specific elements:", new_tuple)


#9. Modify the tuple

t = (1, 2, 3, 4)
temp = list(t)
temp[2] = 99
modified = tuple(temp)
print("Modified tuple:", modified)

#assignment-dictionary

#6. Get the key of a minimum value from the following dictionary
data = {'a': 5, 'b': 2, 'c': 8}
min_key = min(data, key=data.get)
print("Key with minimum value:", min_key)

#7. Change value of a key in a nested dictionary
person = {'name': 'John', 'details': {'age': 25, 'city': 'NY'}}
person['details']['city'] = 'LA'
print("Updated dictionary:", person)

#8. Check if a value exists in a dictionary
data = {'x': 10, 'y': 20, 'z': 30}
value_to_check = 20
exists = value_to_check in data.values()
print("Value exists:", exists)

#9. Rename key of a dictionary
data = {'old_key': 100, 'b': 200}
data['new_key'] = data.pop('old_key')
print("Renamed key dictionary:", data)


	
//c

#include <stdio.h>
#include <string.h>

//assignment-list

//9. Replace list’s item with new value if found
void replaceListItem() {
    int lst[] = {1, 2, 3, 4, 2, 5};
    int n = 6;
    int old_value = 2, new_value = 99;

    printf("Updated list: ");
    for (int i = 0; i < n; i++) {
        if (lst[i] == old_value) {
            lst[i] = new_value;
        }
        printf("%d ", lst[i]);
    }
    printf("\n");
}

//10. Remove all occurrences of a specific item from a list
void removeAllOccurrences() {
    int lst[] = {1, 2, 3, 2, 4, 2, 5};
    int n = 7;
    int remove_value = 2;
    int result[100], j = 0;

    for (int i = 0; i < n; i++) {
        if (lst[i] != remove_value) {
            result[j++] = lst[i];
        }
    }

    printf("List after removing item: ");
    for (int i = 0; i < j; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
}

//assignment-tuples

//6. Sort a tuple of tuples by 2nd item
void sortTupleBySecondItem() {
    int data[4][2] = {{1, 5}, {3, 1}, {2, 9}, {4, 0}};
    int n = 4;

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (data[i][1] > data[j][1]) {
                int temp0 = data[i][0];
                int temp1 = data[i][1];
                data[i][0] = data[j][0];
                data[i][1] = data[j][1];
                data[j][0] = temp0;
                data[j][1] = temp1;
            }
        }
    }

    printf("Sorted by 2nd item: ");
    for (int i = 0; i < n; i++) {
        printf("(%d, %d) ", data[i][0], data[i][1]);
    }
    printf("\n");
}

//7. Count the number of occurrences of item ‘x’ from a tuple
void countItemInTuple() {
    int items[] = {1, 2, 3, 4, 2, 5, 2, 6};
    int n = 8, x = 2, count = 0;

    for (int i = 0; i < n; i++) {
        if (items[i] == x) {
            count++;
        }
    }

    printf("Occurrences of %d: %d\n", x, count);
}

//8. Copy specific elements from one tuple to a new tuple
void copySpecificFromTuple() {
    int original[] = {10, 20, 30, 40, 50, 60};
    int n = 6;

    printf("New tuple with specific elements: ");
    for (int i = 0; i < n; i += 2) {
        printf("%d ", original[i]);
    }
    printf("\n");
}

//9. Modify the tuple
void modifyTuple() {
    int t[] = {1, 2, 3, 4};
    int n = 4;

    t[2] = 99;

    printf("Modified tuple: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", t[i]);
    }
    printf("\n");
}

//assignment-dictionary

struct KeyValue {
    char key[50];
    int value;
};

//6. Get the key of a minimum value from the following dictionary
void minKeyInDict() {
    struct KeyValue dict[] = {{"a", 5}, {"b", 2}, {"c", 8}};
    int n = 3;
    int min = dict[0].value;
    char min_key[50];
    strcpy(min_key, dict[0].key);

    for (int i = 1; i < n; i++) {
        if (dict[i].value < min) {
            min = dict[i].value;
            strcpy(min_key, dict[i].key);
        }
    }

    printf("Key with minimum value: %s\n", min_key);
}

//7. Change value of a key in a nested dictionary
void changeNestedDictValue() {
    struct {
        char name[20];
        struct {
            int age;
            char city[20];
        } details;
    } person = {"John", {25, "NY"}};

    strcpy(person.details.city, "LA");

    printf("Updated dictionary: name=%s, age=%d, city=%s\n", person.name, person.details.age, person.details.city);
}

//8. Check if a value exists in a dictionary
void checkValueInDict() {
    struct KeyValue dict[] = {{"x", 10}, {"y", 20}, {"z", 30}};
    int n = 3, value_to_check = 20;
    int found = 0;

    for (int i = 0; i < n; i++) {
        if (dict[i].value == value_to_check) {
            found = 1;
            break;
        }
    }

    printf("Value exists: %s\n", found ? "true" : "false");
}

//9. Rename key of a dictionary
void renameKeyInDict() {
    struct KeyValue dict[] = {{"old_key", 100}, {"b", 200}};
    int n = 2;

    for (int i = 0; i < n; i++) {
        if (strcmp(dict[i].key, "old_key") == 0) {
            strcpy(dict[i].key, "new_key");
            break;
        }
    }

    printf("Renamed key dictionary:\n");
    for (int i = 0; i < n; i++) {
        printf("%s: %d\n", dict[i].key, dict[i].value);
    }
}

int main() {
    replaceListItem();
    removeAllOccurrences();
    sortTupleBySecondItem();
    countItemInTuple();
    copySpecificFromTuple();
    modifyTuple();
    minKeyInDict();
    changeNestedDictValue();
    checkValueInDict();
    renameKeyInDict();
    return 0;
}

